{"version":3,"sources":["../../src/components/ItemTypes.js","../../src/components/styles.js","../../src/components/Card.js","../../src/components/DNDContainer.js","../../src/index.js","App.js","index.js"],"names":["card","width","height","border","padding","margin","place","display","flexWrap","container","containerWhite","backgroundColor","cursor","Card","id","content","index","moveCard","ref","useRef","drop","useDrop","accept","ItemTypes","hover","dragIndex","item","hoverIndex","hoverBoundingRect","hoverMiddleY","hoverClientY","monitor","clientOffset","useDrag","type","collect","isDragging","opacity","drag","style","DNDContainer","props","useState","cards","setCards","useCallback","dragCard","update","$splice","backend","HTML5Backend","key","renderCard","DNDComponent","data","render","this","Component","App","ReactDOM","document","getElementById"],"mappings":"olBAAA,MACQ,OCDFA,EAAO,CACTC,MADS,mBAETC,OAFS,QAGTC,OAHS,kBAITC,QAJS,YAKTC,OAAQ,OAGZ,EAAe,CACXC,MAAO,CACHL,MADG,OAEHM,QAFG,OAGHC,SAAU,QAEdC,UAAW,EAAF,GANE,GASXC,eAAgB,EAAF,MAEVC,gBAFU,QAGVC,OAAQ,UCfVC,EAAO,SAAC,GAAqC,IAAnCC,EAAmC,EAAnCA,GAAIC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC5BC,EAAMC,iBAAZ,MACSC,EAAQC,YAAQ,CACvBC,OAAQC,EACRC,MAFuB,cAGrB,GAAKN,EAAL,SAGA,IAAMO,EAAYC,EAAlB,MACMC,EAAN,EAEA,GAAIF,IAAJ,GAIA,IAAMG,EAAoBV,UAA1B,wBAEMW,GACHD,SAA2BA,EAA5B,KADF,EAKME,EAFeC,EAArB,kBAEqBC,EAAiBJ,EAAtC,IAKIH,KAA0BK,EAA9B,GAIIL,KAA0BK,EAA9B,IAIAb,EAASQ,EAATR,GAKAS,gBAtCJ,GAyCA,EAA+BO,YAAQ,CACrCP,KAAM,CAAEQ,KAAMX,EAAgBT,GAAxB,EAA4BE,SAClCmB,QAAS,SAAAJ,GAAO,MAAK,CACnBK,WAAYL,mBAGVM,EANN,gBAM6B,EAA7B,EAEA,OADAC,EAPA,MAOKlB,EAALkB,IAEE,yBAAKpB,IAAL,EAAeqB,MAAK,KAAOA,EAAP,gBAA6BF,aADnD,ICjDIG,EAAe,SAACC,GAEjB,MAA0BC,mBAASD,OAAaA,EAAbA,KAAnC,IAAOE,EAAP,KAAcC,EAAd,KAEM3B,EAAW4B,uBACd,cACJ,IAAMC,EAAWH,EAAjB,GACAC,EACCG,IAAOJ,EAAO,CACbK,QAAS,CAAC,CAACvB,EAAF,GAAiB,CAACE,EAAY,EAA9B,SAIZ,CATE,IAwBH,OACC,uBAAasB,QAASC,KACrB,yBAAKX,MAAOA,EAAMjC,OAChBqC,EAAA,KAAU,cAEV,OADY3C,GAAQA,EAAT,IAhBO,SAACA,EAAMgB,GACvB,OACJ,qBACCmC,IAAKnD,EADN,GAECgB,MAFD,EAGCF,GAAId,EAHL,GAICe,QAASf,EAJV,QAKCiB,SAAUA,IASuBmC,CAAWpD,EAA3C,S,ECpCAqD,Y,QACL,cAAoB,aAChB,wBACA,MAAa,CACTC,KAAMb,OAAaA,EAAbA,KAA0B,IAHpB,E,mGAOpBc,kBACC,IAAOD,EAAQE,KAAf,WACA,OACC,6BACC,qBAAcF,KAAMA,M,EAZlBD,CAAqBI,aCwCZC,EAvCH,WACV,OACE,kBAAC,EAAD,CAAcJ,KAAM,CAClB,CACExC,GAAI,EACJC,QAAS,2BAEX,CACED,GAAI,EACJC,QAAS,0BAEX,CACED,GAAI,EACJC,QAAS,gBAEX,CACED,GAAI,EACJC,QAAS,wBAEX,CACED,GAAI,EACJC,QAAS,4FAEX,CACED,GAAI,EACJC,QAAS,OAEX,CACED,GAAI,EACJC,QAAS,UAEX,CACED,GAAI,EACJC,QAAS,gBC/BjB4C,IAASJ,OAAO,kBAAC,EAAD,MAASK,SAASC,eAAe,W","file":"static/js/main.c8fb22a9.chunk.js","sourcesContent":["export default {\n  CARD: 'card',\n}\n","const card = {\n    width: 'calc(25% - 44px)',\n    height: '300px',\n    border: '2px dashed gray',\n    padding: '10px 15px',\n    margin: '5px'\n}\n\nexport default {\n    place: {\n        width: '100%',\n        display: 'flex',\n        flexWrap: 'wrap'\n    },\n    container: {\n        ...card\n    },\n    containerWhite: {\n        ...card,\n        backgroundColor: 'white',\n        cursor: 'move',\n    }\n}","import React, { useRef } from 'react'\nimport { useDrag, useDrop } from 'react-dnd'\nimport ItemTypes from './ItemTypes'\nimport style from './styles'\n\nconst Card = ({ id, content, index, moveCard }) => {\n  const ref = useRef(null)\n  const [, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    hover(item, monitor) {\n      if (!ref.current) {\n        return\n      }\n      const dragIndex = item.index\n      const hoverIndex = index\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current.getBoundingClientRect()\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset()\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return\n      }\n      // Time to actually perform the action\n      moveCard(dragIndex, hoverIndex)\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex\n    },\n  })\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ItemTypes.CARD, id, index },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  })\n  const opacity = isDragging ? 0 : 1\n  drag(drop(ref))\n  return (\n    <div ref={ref} style={{ ...style.containerWhite, opacity }}>\n      {content}\n    </div>\n  )\n}\nexport default Card\n","import React, { useState, useCallback } from 'react'\nimport Card from './Card'\nimport update from 'immutability-helper'\nimport style from './styles'\nimport { DndProvider } from 'react-dnd'\nimport HTML5Backend from 'react-dnd-html5-backend'\n\nconst DNDContainer = (props) => {\n\t{\n    \tconst [cards, setCards] = useState(props.data ? props.data : [])\n\n    \tconst moveCard = useCallback(\n      \t\t(dragIndex, hoverIndex) => {\n\t\t\t\tconst dragCard = cards[dragIndex]\n\t\t\t\tsetCards(\n\t\t\t\t\tupdate(cards, {\n\t\t\t\t\t\t$splice: [[dragIndex, 1], [hoverIndex, 0, dragCard]],\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t},\n\t\t\t[cards],\n    \t)\n\n    \tconst renderCard = (card, index) => {\n      \t\treturn (\n\t\t\t\t<Card\n\t\t\t\t\tkey={card.id}\n\t\t\t\t\tindex={index}\n\t\t\t\t\tid={card.id}\n\t\t\t\t\tcontent={card.content}\n\t\t\t\t\tmoveCard={moveCard}\n\t\t\t\t/>\n      \t\t)\n    \t}\n\n\t\treturn (\n\t\t\t<DndProvider backend={HTML5Backend}>\n\t\t\t\t<div style={style.place}>\n\t\t\t\t\t{cards.map((card, i) => {\n\t\t\t\t\t\tvar item = (card && card.id) && renderCard(card, i)\n\t\t\t\t\t\treturn item\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</DndProvider>\n\t\t)\n\t}\n}\n\nexport default DNDContainer\n","import React, {Component} from 'react'\nimport DNDContainer from './components/DNDContainer'\n\nclass DNDComponent extends Component {\n\tconstructor (props) {\n    \tsuper(props)\n    \tthis.state = {\n        \tdata: props.data ? props.data : []\n    \t}\n    }\n\n\trender () {\n\t\tconst {data} = this.state \n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<DNDContainer data={data} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default DNDComponent","import React from 'react'\n\nimport DNDComponent from 'btz-dnd-component'\n\nconst App = () => {\n  return (\n    <DNDComponent data={[\n      {\n        id: 1,\n        content: 'Write a cool JS library',\n      },\n      {\n        id: 2,\n        content: 'Make it generic enough',\n      },\n      {\n        id: 3,\n        content: 'Write README',\n      },\n      {\n        id: 4,\n        content: 'Create some examples',\n      },\n      {\n        id: 5,\n        content: 'Spam in Twitter and IRC to promote it (note that this element is taller than the others)',\n      },\n      {\n        id: 6,\n        content: '???',\n      },\n      {\n        id: 7,\n        content: 'PROFIT',\n      },\n      {\n        id: 8,\n        content: 'AS IS AS',\n      },\n    ]} />\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}